# Production Environment Variables - Backend
# Copy this to .env for production deployment

# ============================================
# SERVER CONFIGURATION
# ============================================
NODE_ENV=production
PORT=5000
CLIENT_URL=https://your-frontend-domain.com

# ============================================
# DATABASE - MongoDB Atlas
# ============================================
# Get this from MongoDB Atlas: Database > Connect > Connect your application
# Format: mongodb+srv://<username>:<password>@<cluster>.mongodb.net/<database>?retryWrites=true&w=majority
MONGODB_URI=mongodb+srv://YOUR_USERNAME:YOUR_PASSWORD@YOUR_CLUSTER.mongodb.net/webhook-relay-prod?retryWrites=true&w=majority

# ============================================
# REDIS - Redis Cloud or Upstash
# ============================================
# Redis Cloud: Get from Redis Cloud dashboard
# Format: redis://default:<password>@<host>:<port>
REDIS_URL=redis://default:YOUR_REDIS_PASSWORD@YOUR_REDIS_HOST:YOUR_REDIS_PORT

# OR for Upstash Redis:
# REDIS_URL=rediss://default:YOUR_UPSTASH_TOKEN@YOUR_UPSTASH_ENDPOINT:6380

# ============================================
# SECURITY - JWT & SECRETS
# ============================================
# CRITICAL: Generate a strong random secret for JWT
# Run: node -e "console.log(require('crypto').randomBytes(64).toString('hex'))"
JWT_SECRET=REPLACE_WITH_STRONG_RANDOM_SECRET_MINIMUM_32_CHARACTERS

# CRITICAL: Generate a strong random secret for HMAC webhook signatures
# Run: node -e "console.log(require('crypto').randomBytes(64).toString('hex'))"
HMAC_SECRET=REPLACE_WITH_STRONG_RANDOM_SECRET_MINIMUM_32_CHARACTERS

# JWT token expiration (7 days recommended for production)
JWT_EXPIRES_IN=7d

# ============================================
# WEBHOOKS CONFIGURATION
# ============================================
# Your production webhook base URL (where webhooks will be sent)
WEBHOOK_BASE_URL=https://your-backend-domain.com

# Webhook timeout in milliseconds (30 seconds)
WEBHOOK_TIMEOUT=30000

# Default retry configuration
DEFAULT_MAX_RETRIES=3
DEFAULT_RETRY_INTERVALS=1000,5000,10000

# ============================================
# RATE LIMITING
# ============================================
# Requests per window (per IP address)
RATE_LIMIT_WINDOW_MS=900000
RATE_LIMIT_MAX_REQUESTS=100

# ============================================
# CORS CONFIGURATION
# ============================================
# Your frontend domain (no trailing slash)
CORS_ORIGIN=https://your-frontend-domain.com

# ============================================
# EMAIL CONFIGURATION (Optional)
# ============================================
# For Gmail: Enable "Less secure app access" or use App Password
# For SendGrid: Get API key from SendGrid dashboard
EMAIL_HOST=smtp.gmail.com
EMAIL_PORT=587
EMAIL_SECURE=false
EMAIL_USER=your-email@gmail.com
EMAIL_PASSWORD=your-email-password-or-app-password
EMAIL_FROM=noreply@your-domain.com

# OR use SendGrid
# EMAIL_SERVICE=sendgrid
# SENDGRID_API_KEY=your-sendgrid-api-key

# ============================================
# MONITORING & LOGGING
# ============================================
# Sentry for error tracking (optional but recommended)
# Get DSN from Sentry dashboard: Settings > Projects > Your Project > Client Keys
SENTRY_DSN=https://YOUR_SENTRY_KEY@sentry.io/YOUR_PROJECT_ID

# Log level: error, warn, info, debug
LOG_LEVEL=info

# ============================================
# SUBSCRIPTION & QUOTAS
# ============================================
# Default monthly webhook quota for free tier
DEFAULT_QUOTA_LIMIT=1000

# Subscription tiers
TIER_FREE_QUOTA=1000
TIER_STARTER_QUOTA=10000
TIER_PROFESSIONAL_QUOTA=100000
TIER_ENTERPRISE_QUOTA=1000000

# ============================================
# PAYMENT INTEGRATION (Optional - Paystack)
# ============================================
# Get from Paystack dashboard: Settings > API Keys & Webhooks
PAYSTACK_SECRET_KEY=sk_live_YOUR_PAYSTACK_SECRET_KEY
PAYSTACK_PUBLIC_KEY=pk_live_YOUR_PAYSTACK_PUBLIC_KEY
PAYSTACK_WEBHOOK_SECRET=YOUR_PAYSTACK_WEBHOOK_SECRET

# ============================================
# ADDITIONAL SECURITY (Recommended)
# ============================================
# API rate limiting for authenticated users
API_RATE_LIMIT_AUTHENTICATED=1000
API_RATE_LIMIT_WINDOW=3600000

# Maximum request body size (in bytes)
MAX_REQUEST_SIZE=10485760

# Session timeout (in milliseconds)
SESSION_TIMEOUT=86400000

# ============================================
# HEALTH CHECK
# ============================================
# Health check endpoint path
HEALTH_CHECK_PATH=/health

# ============================================
# NOTES FOR PRODUCTION DEPLOYMENT
# ============================================
# 
# 1. NEVER commit this file with real credentials to Git
# 2. Always use strong, randomly generated secrets
# 3. Use environment-specific .env files (.env.production, .env.staging)
# 4. Store sensitive values in your hosting platform's environment variables
# 5. For Heroku: Use `heroku config:set KEY=VALUE`
# 6. For Vercel: Use Vercel dashboard Environment Variables
# 7. For AWS/DigitalOcean: Use Secrets Manager or environment variables
# 8. Enable SSL/TLS for MongoDB and Redis connections in production
# 9. Rotate secrets regularly (every 90 days recommended)
# 10. Monitor your Sentry dashboard for errors
#
# Quick Setup Commands:
# ----------------------
# Generate JWT Secret:
#   node -e "console.log(require('crypto').randomBytes(64).toString('hex'))"
#
# Generate HMAC Secret:
#   node -e "console.log(require('crypto').randomBytes(64).toString('hex'))"
#
# Test MongoDB Connection:
#   node -e "const mongoose = require('mongoose'); mongoose.connect('YOUR_MONGODB_URI').then(() => console.log('✓ Connected')).catch(e => console.error('✗ Error:', e.message))"
#
# Test Redis Connection:
#   node -e "const redis = require('redis'); const client = redis.createClient({url:'YOUR_REDIS_URL'}); client.connect().then(() => console.log('✓ Connected')).catch(e => console.error('✗ Error:', e.message))"
